#!/usr/bin/env python
# -*- coding: utf-8 -*-
#Author: Tim Henderson
#Email: tim.tadh@hackthology.com
#For licensing see the LICENSE file in the top level directory.

import os, sys
from getopt import getopt, GetoptError
import markdown

VERSION = 'git master'

usage_message = \
'''usage: stat.py [Options] [FILE]+'''

extended_message = \
'''
Explanation

    Generates statistics on parse trees. "[FILE]+" is a list of files containing
    serialized parse trees. The format for the parse tree is a pre-order
    enumeration.

      grammar
       
        nodes := nodes node
        nodes := node
        node := NUM COLON STRING NEWLINE
        
        COLON = r':'
        NUM = r'[0-9]+'
        STRING = r'.+$'
        NEWLINE = "\\n"

        NB: Whitespace is signficant, but STRING matches whitespace (except for
            newline).
      
      eg.
        
        2:root
        2:left side
        0:x
        1:y
        0:z
        3:right side
        0:a
        0:b
        0:c

      corresponds to
                              root                                        
                              /  \                                        
                             /    \                                       
                    left side      right side                         
                    /    \         /    |    \                               
                   x      y       a     b     c                           
                          |                                               
                          z                                               
                                                                                  
Options

    -h, help                            print this message   
    -v, version                         print the version
    -g, grammar=<file>                  supply a known grammar to annotate
    -o, outdir=<directory>              supply a path to a non-existant
                                          directory
                                          [default: ./gramstats]
    -i, imgs=<bool>                     generate images
                                          [default: true]
    -t, tables=<bool>                   generate statistic tables (as csv files)
                                          [default: true]
    -a, artifacts                       list what artifacts `stat.py` can
                                          generate
    -A, artifact=<artspec>              generate a specific artifact only.
                                          Multiple '-A' flags allowed.
                                          [overrides -o,-i, and -t]
    -T, usetables=<directory>           look for pre-existing statistic tables
                                          in this directory. With this option
                                          no other files are required, however
                                          if more examples are given the tables
                                          are updated. The new tables will only
                                          overwrite the old tables if
                                          "-o <dirname>" == "-T <dirname>"

Specs

    <file>                              the path to a file
    <directory>                         the path to a directory.
    <bool>                              either "true" or "false"
    <artspec>                           <artifact>:<file>
    <artifact>                          an artifact in the list generated by
                                          --artifacts

'''

error_codes = {
    'usage':1,
    'file_not_found':2,
    'option':3,
    'args':4,
    'version':5,
    'bad_bool':6,
    'no_args':7,
}

def log(msg):
    print msg

def version():
    '''Print version and exits'''
    log('stat.py version ' + VERSION)
    sys.exit(error_codes['version'])

def usage(code=None):
    '''Prints the usage and exits with an error code specified by code. If code
    is not given it exits with error_codes['usage']'''
    log(usage_message)
    if code is None:
        log(extended_message)
        code = error_codes['usage']
    sys.exit(code)

def assert_file_exists(path):
    '''checks if the file exists. If it doesn't causes the program to exit.
    @param path : path to file
    @returns : the path to the file (an echo) [only on success]
    '''
    path = os.path.abspath(path)
    if not os.path.exists(path):
        log('No file found. "%(path)s"' % locals())
        usage(error_codes['file_not_found'])

def parse_bool(s):
    '''parses s to check it is in [true, false]. returns the appropriate
    bool. If it isn't a book prints error and exits.
    @param s : a string
    @returns bool
    '''
    bools = {'true':True, 'false':False}
    if s not in bools:
        log('Expected bool found "%s"' % (s))
        log('You probably want %s case matters' % str(bools.keys()))
        usage(error_codes['bad_bool'])
    return bools[s]
  
def main(args):
    
    if not args: usage(error_codes['no_args'])

    try:
        opts, args = getopt(args, 
            'hvg:o:i:', 
            ['help', 'version', 'grammar=', 'outdir=', 'imgs=']
        )
    except GetoptError, err:
        log(err)
        usage(error_codes['option'])
        
    usetables = False
    outdir = './gramstats'
    grammar = None
    for opt, arg in opts:
        if opt in ('-h', '--help'):
            usage()
        elif opt in ('-v', '--version'):
            version()
        elif opt in ('-g', '--grammar'):
            grammar = assert_file_exists(arg)
        elif opt in ('-o', '--outdir'):
            outdir = assert_file_exists(arg)
        elif opt in ('-i', '--imgs'):
            outdir = parse_bool(arg)
    

if __name__ == '__main__':
    main(sys.argv[1:])

